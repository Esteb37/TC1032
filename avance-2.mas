// MAIN PROGRAM
ORG 100 	/ Initial Memory Location where program starts
JnS SubrMin	/ Llamada a subrutina para encontrar valor mínimo
JnS SubrMax	/ Llamada a subrutina para encontrar valor máximo
JnS SubrMean / Llamada a subrutina para encontrar la media
JnS SubrMed / Llamada a subrutina para encontrar valor mediana
Load min / Carga de valor mínimo
Output 
Load max / Carga de valor máximo
Output
Load mean / Carga de valor de media
Output
Load med / Carga de valor mediana
Output
Halt 		/ Terminate program

		// DATA
RPM, 	Dec 1 		/ Used to increment and decrement by 1 
		Dec 1505 	/ RPM Reading 1 
        Dec 1928	/ RPM Reading 2  
        Dec 1463	/ RPM Reading 3  
        Dec 1705	/ RPM Reading 4  
        Dec 1707	/ RPM Reading 5 
        Dec 1899	/ RPM Reading 6
        Dec 1942	/ RPM Reading 7
        Dec 520		/ RPM Reading 8
        Dec 1730	/ RPM Reading 9
        Dec 1104	/ RPM Reading 10
        Dec 887		/ RPM Reading 11
        Dec 786		/ RPM Reading 12
        Dec 1210	/ RPM Reading 13
        Dec 1676	/ RPM Reading 14
        Dec 717		/ RPM Reading 15
        Dec 1827	/ RPM Reading 16
        Dec 742		/ RPM Reading 17
        Dec 1270	/ RPM Reading 18
        Dec 1436	/ RPM Reading 19
        Dec 538		/ RPM Reading 20
        Dec 1603	/ RPM Reading 21
        Dec 1415	/ RPM Reading 22
        Dec 1450	/ RPM Reading 23
        Dec 1978	/ RPM Reading 24
        Dec 1592	/ RPM Reading 25
        Dec 1300	/ RPM Reading 26
        Dec 965		/ RPM Reading 27
        Dec 733		/ RPM Reading 28
        Dec 1933	/ RPM Reading 29
        Dec 799		/ RPM Reading 30
        Dec 1817	/ RPM Reading 31
        Dec 1290	/ RPM Reading 32
        Dec 1009	/ RPM Reading 33
        Dec 715		/ RPM Reading 34
        Dec 1758	/ RPM Reading 35
        Dec 519		/ RPM Reading 36
        Dec 582		/ RPM Reading 37
        Dec 963		/ RPM Reading 38
        Dec 1214	/ RPM Reading 39
        Dec 1198	/ RPM Reading 40
        Dec 688		/ RPM Reading 41
        Dec 1567	/ RPM Reading 42
        Dec 1093	/ RPM Reading 43
        Dec 1017	/ RPM Reading 44
        Dec 1932	/ RPM Reading 45
        Dec 1857	/ RPM Reading 46
        Dec 1201	/ RPM Reading 47
        Dec 909		/ RPM Reading 48
        Dec 889		/ RPM Reading 49 
        Dec 1421	/ RPM Reading 50 
        
addr, Hex 10D / Dirección donde inicia la lista de números
addr2, Hex 10D / Dirección donde inicia la lista de números (copia)
addr3, Hex 10D / Dirección donde inicia la lista de números (copia)
addr4, Hex 10D / Dirección donde inicia la lista de números (copia)
counter, Dec 1 / Contador
one, Dec 1 / Uno
min, Dec 0 / Valor mínimo
max, Dec 0 / Valor máximo
sum, Dec 0 / Valor de suma de los números (para sacar el promedio)
med, Dec 0 / Valor mediana
a, Hex 0 / Valor del elemento a de la lista
b, Hex 0 / Valor del elemento b de la lista
temp, Hex 0 / Valor temporal
pos, Dec 0 / Valor posición
nmin, Dec 50 / Cantidad de datos
nmax, Dec 50 / Cantidad de datos (copia para subrutina para obtener máximo)
nmed1, Dec 5 / Cantidad de datos (copia para subrutina para obtener mediama)
nmed2, Dec 5 / Cantidad de datos (copia para subrutina para obtener mediana)
nmed, Dec 3 / Cantidad de datos (copia para subrutina para obtener mediana)
nmean, Dec 0 / Cantidad de datos promediados
nmean2, Dec 50 / Cantidad de datos que faltan por promediar 
mean, Dec 0 / Valor del promedio
dividend, Dec 0 / Variable para guardar el dividendo para la función de división
division, Dec 0 / Variable para guardar el resultado de la función de división

        // SUBROUTINES
SubrMin,	Hex 0		/ Subroutine 1, return address saved here
		Load addr
        Add counter
        Store addr
		LoadI addr / Se carga de forma indirecta el valor de addr
		Store min / Se guarda en min
Loop,   Load nmin / Se carga nmin
        Subt counter / Se le resta 1
        Store nmin / Se guarda resultado en nmin
        Skipcond 800 / Salto de línea si AC > 0
        JumpI SubrMin	/ Return to calling code 
		Load addr / Se carga addr
        Add counter / Se le suma 1 
		Store addr / Se guarda el resultado en addr
        LoadI addr / Se carga de forma indirecta el valor de addr
        Subt min / Se le resta min
        Skipcond 000 / Salto de línea si AC < 0
        Jump Loop / Salto a línea Loop
        LoadI addr /  Se carga de forma indirecta el valor de addr
        Store min / Se guarda en min
        Jump Loop / Salto a línea Loop
        
        
  
        
        
SubrMax,	Hex 0		/ Subroutine 2, return address saved here
		LoadI addr2 / Se carga de forma indirecta el valor de addr2
		Store max / Se guarda en max
Loop2,  Load nmax / Se carga nmax
        Subt counter / Se le resta 1
        Store nmax  / Se guarda resultado en nmax
        Skipcond 800 / Salto de línea si nmax > 0
        JumpI SubrMax	/ Return to calling code 
		Load addr2 / Se carga addr2
        Add counter / Se le suma 1
		Store addr2 / Se guarda el resultado en addr2
        LoadI addr2 / Se carga de forma indirecta el valor de addr2
        Subt max / Se le resta max
        Skipcond 800  / Salto de línea si AC > 0
        Jump Loop2 / Salto a línea Loop2
        LoadI addr2 /  Se carga de forma indirecta el valor de addr2
        Store max / Se guarda en max
        Jump Loop2 / Salto a línea Loop2
        
        
SubrMean,   Hex 0 / Subroutine 3, return address saved here
        Load addr3 / Se obtiene la primera dirección
        Add one / Se pasa a la siguiente dirección
        Store addr3 / Se guarda esta nueva dirección
     
        LoadI addr3 / Se carga de forma indirecta el valor de addr3
        Store mean / Se guarda en el promedio
        
Loop3,  Load addr3 / Obtener la dirección del último valor
        Add one / Pasar a la siguiente dirección
        Store addr3 / Guardar la nueva dirección
        Load nmean / Se obtiene la cantidad de datos que se han promediado
        Add one / Se le suma 1 a N
        Store nmean / Se guarda N
        Load nmean2 / Se obtiene la cantidad de datos que faltan por promediar
        Subt one / Se resta uno
        Store nmean2 / Se guarda
        Skipcond 800 / Si le faltan datos por recorrer, salto de línea
        JumpI SubrMean / Terminar subrutina
        Load mean /Cargar el promedio móvil
        Store dividend / Guardarlo como el dividendo
        Clear
        Store division / Limpiar el resultado de la división
        JnS divide / Dividir promedio entre número de datos promediados
        Load mean / Cargar el promedio
		Subt division / Restarle el resultado de la división
        Store mean / Guardar el promedio
        LoadI addr3 / Cargar el siguiente valor a promediar
        Store dividend / Guardarlo como el dividendo 
        Clear
        Store division / Limpiar el resultado de la división
        JnS divide / Dividir el valor a promediar entre el número de datos promediados
        Load mean / Cargar promedio móvil
        Add division / Sumarle el resultado de la división
        Store mean / Guardar promedio
        Jump Loop3 / Reiniciar

divide, Hex 0
LoopDivide, Load dividend / Se carga el resultado de la suma de todos los números
        Subt nmean 
        Store dividend
        Skipcond 800 / Si el resultado > 0 salto de línea
        JumpI divide
        Load division / Se obtiene el valor del promedio (el resultado de la división)
        Add one / Se le suma uno 
        Store division / Se guarda el resultado
        Jump LoopDivide / Se reinicia el proceso

SubrMed,	Hex 0		/ Subroutine 4, return address saved here
Loop4,  Load addr4		/ Se carga la dirección de la lista
		Add pos			/ Se agrega las posiciones que ya recorrió
        Store a			/ Guarda la dirección de la primera posición en a
        Add counter		/ Suma uno a la dirección de a
        Store b			/ Guarda la segunda dirección en b
        LoadI a			/ Carga indirectamente el valor de a
        Store temp		/ Lo guarda en la variable temporal
        LoadI b			/ Carga indirectamente el valor de b
        Subt temp		/ b - temp
        Skipcond 800	/ Si AC > 0 entonces salto de línea
        JnS sort		/ Guarda los datos para la función sort
        Load pos		/ Carga el valor de posición
        Add counter		/ Suma 1 a pos
        Store pos		/ Guarda pos
        Subt nmed1		/ pos - nmed1
        Skipcond 000	/ Si AC < 0 entonces salto de línea
        JnS reset		/ Guarda los datos para la función reset
        Load nmed1		/ Carga el valor de nmed1
        Skipcond 400	/ Si AC = 0 entonces salto de línea
        Jump Loop4		/ Salto a línea Loop4
        
get,	LoadI addr4		/ Carga indirectamente el valor de addr4
		Store med		/ Guarda el valor en med
		Load addr4		/ Carga la dirección de addr4
		Add counter		/ Le suma 1 a la dirección
        Store addr4		/ Guarda el valor en addr4
        Load nmed		/ Carga el valor de nmed
        Subt counter	/ Resta 1 a nmed
        Store nmed		/ Guarda el valor en nmed
        Skipcond 400	/ Si AC = 0 entonces salto de línea
        Jump get		/ Salto a línea get
        JumpI SubrMed	/ Return to calling code
        
sort,	Hex 0			/ Return address saved here
		LoadI a			/ Carga indirectamente el valor de a
        Store temp		/ Guarda el valor en temp
        LoadI b			/ Carga indirectamente el valor de b
        StoreI a		/ Guarda el valor en la dirección indirecta
        Load temp		/ Carga la variable temp
        StoreI b		/ Guarda el valor en la dirección indirecta
        JumpI sort		/ Regresa a la línea posterior de donde se llamó

reset,	Hex 0			/ Return address saved here
		clear			/ AC = 0
        Store pos		/ Guarda el valor en pos
        Load nmed1		/ Carga el valor de nmed1
        Subt counter	/ Le resta 1 a nmed1
        Store nmed1		/ Guarda el valor en nmed1
		JumpI reset		/ / Regresa a la línea posterior de donde se llamó
        

        
        END
